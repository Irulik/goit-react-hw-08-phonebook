{"version":3,"file":"static/js/590.a6f6e906.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactList/ContactList.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/slice.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\nexport const getFilter = state => state.filter.filter;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contacts/operations\";\nimport { selectFilter, selectAllContacts } from \"../../redux/contacts/selectors\";\n\nconst getVisibleContacts = (contacts, filter) => {\n  if (!filter) {\n    return contacts;\n  } else {\n    return contacts.filter((contact) => {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    });\n  }\n};\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectAllContacts);\n  const filter = useSelector(selectFilter);\n  const visibleContacts = getVisibleContacts(contacts, filter);\n\n  const dispatch = useDispatch();\n  const handleDelete = (id) => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <div>\n      <ul>\n        {visibleContacts.map((contact) => (\n          <li key={contact.id}>\n            <div>\n              <p>{contact.name}</p>\n              <p>{contact.number}</p>\n            </div>\n            <button onClick={() => handleDelete(contact.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\"};","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  contacts: [\n    { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n    { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n    { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n    { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" }\n  ],\n  filter: '',\n};\n\nconst contactSlice = createSlice({\n  name: 'contacts',\n  initialState: initialState,\n  reducers: {\n    addContact(state, { payload }) {\n      state.contacts.push(payload);\n    },\n    deleteContact(state, { payload }) {\n      state.contacts = state.contacts.filter(contact => contact.id !== payload);\n    },\n    filterContact(state, { payload }) {\n      state.filter = payload;\n    },\n  },\n});\n\nexport const { addContact, deleteContact, filterContact } =\n  contactSlice.actions;\nexport const contactReducer = contactSlice.reducer;\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport css from \"./ContactForm.module.css\";\nimport { addContact } from '../../redux/contacts/operations';\n// import { nanoid } from 'nanoid';\nimport { selectContacts } from '../../redux/slice';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const isUnique = contacts.find((contact) => contact.number === number);\n\n    if (isUnique) {\n      alert('Цей номер вже існує в телефонній книзі.');\n    } else {\n      dispatch(addContact({ name, number: number }));\n      setName('');\n      setNumber('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label>Name:</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n          pattern=\"^[a-zA-Z]+([' \\-]?[a-zA-Z ])*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces.\"\n          required\n        />\n      </div>\n      <div>\n        <label>Number:</label>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={e => setNumber(e.target.value)}\n          pattern=\"[+]?[0-9\\-()\\\\s]+\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </div>\n      <button className={css.btn} type=\"submit\">Add Contact</button>\n    </form>\n  );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/slice'; \n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.contacts.filter); \n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <div>\n      <label htmlFor=\"filter\">Find contacts by name:</label>\n      <input\n        type=\"text\"\n        id=\"filter\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleFilterChange}\n      />\n    </div>\n  );\n};\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <div>{isLoading && \"We're thinking about it...\"}</div>\n      <Filter /> \n      <ContactList />\n    </>\n  );\n}"],"names":["selectLoading","state","contacts","loading","selectFilter","filter","selectAllContacts","items","ContactList","visibleContacts","contact","name","toLowerCase","includes","getVisibleContacts","useSelector","dispatch","useDispatch","_jsx","children","map","_jsxs","number","onClick","id","deleteContact","contactSlice","createSlice","initialState","reducers","addContact","_ref","payload","push","_ref2","filterContact","_ref3","_contactSlice$actions","actions","selectContacts","reducer","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","onSubmit","e","preventDefault","find","alert","type","value","onChange","target","pattern","title","required","className","css","Filter","htmlFor","setFilter","Contacts","isLoading","useEffect","fetchContacts","_Fragment","Helmet"],"sourceRoot":""}